# Створити клас Vehicle (транспортний засіб):
#
# ні від чого не наслідується
# в ініціалізатор класу (__init__ метод) передати
# producer: str
# model: str
# year: int
# tank_capacity: float # обєм паливного баку
# tank_level: float = 0 # початковий параметр рівня паливного баку дорівнює 0, параметр в аргументах не передавати
# maxspeed: int
# fuel_consumption: float # litres/100km споживання пального
# odometer_value: int = 0 # при сході з конвеєра пробіг нульовий, параметр в аргументах не передавати
#
#
# визначити метод __repr__, яким повертати інформаційну стрічку (наповнення на ваш вибір, проте параметри model and
# year and odometer_value мають бути передані
#
# написати метод refueling, який не приймає жодного аргумента, заправляє автомобіль на уявній автозаправці до
# максимума (tank_level = tank_capacity), після чого виводить на екран повідомлення, скільки літрів було заправлено (
# перша заправка буде повного баку, а в інших випадках величина буде залежати від залишку пального в баку)
#
# написати метод race, який приймає один аргумент (не враховуючи self) - відстань, яку потрібно проїхати, а повертає
# словник, в якому вказано, скільки авто проїхало, з огляду на заповнення паливного баку перед поїздкою,
# залишок пального (при малому кілометражі все пальне не використається), та час, за який відбулася дана поїздка,
# з урахування, що середня швидкість складає 80% від максимальної (витрата пального рівномірна незалежно від швидкості)
#
# за результатами роботи метода в атрибуті tank_level екземпляра класа має зберігатися залишок пального після поїздки
# (зрозуміло, що не менше 0)
#
# збільшити на величину поїздки показники odometer_value
#
# написати метод lend_fuel, який приймає окрім self ще й other обєкт, в результаті роботи якого паливний бак обєкта,
# на якому було викликано відповідний метод, наповнюється до максимального рівня за рахунок відповідного зменшення
# рівня пального у баку дружнього транспортного засобу
#
# вивести на екран повідомлення з текстом типу "Дякую, бро, виручив. Ти залив мені *** літрів пального"
#
# у випадку, якщо бак першого обєкта повний або у другого обєкта немає пального, вивести повідомлення "Нічого
# страшного, якось розберуся"
#
# написати метод get_tank_level, для отримання інформації про залишок пального конкретного інсттанса
#
# написати метод get_mileage, який поверне значення пробігу odometer_value
#
# написати метод __eq__, який приймає окрім self ще й other обєкт (реалізація магічного методу для оператора
# порівняння == )
#
# даний метод має повернути True у випадку, якщо 2 обєкта, які порівнюються, однакові за показниками року випуску та
# пробігу (значення відповідних атрибутів однакові, моделі можуть бути різними)
#
# створіть не менше 2-х обєктів класу, порівняйте їх до інших операцій, заправте їх, покатайтесь на них на різну
# відстань, перевірте пробіг, позичте один в одного пальне, знову порівняйте

from dataclasses import dataclass

@dataclass

class Vehicle:
    """ клас Транспортний засіб"""
